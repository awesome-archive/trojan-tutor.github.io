<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Trojan集群配置</title>
      <link href="/2020/05/17/MySQL-remote-config.html"/>
      <url>/2020/05/17/MySQL-remote-config.html</url>
      
        <content type="html"><![CDATA[<h3 id="期望效果">期望效果</h3><p>Trojan服务器通过自签证书进行SSL加密链接访问Panel服务器中MySQL数据。由于Trojan服务器和Panel服务器都是自己配置的可信任服务器，故自签证书足以。</p><h3 id="前置条件">前置条件</h3><ol type="1"><li>按照<a href="/2019/04/10/p41.html">自建梯子教程 --Trojan版本</a>配置Trojan好服务器；</li><li>按照<a href="/2019/04/10/p41.html">自建梯子教程 --Trojan版本</a>和<a href="/2019/06/08/p43.html">Trojan-Panel配置</a>配置好Panel服务器；</li><li><strong><em>不能</em></strong>使用<code>root</code>用户，但是要确保用户具有sudo权限，使用配置Trojan的时候的同一个账户也是可以的<a href="/2019/04/10/p41.html#createuser">参考</a>；</li><li>配置防火墙允许3306端口；</li><li>系统要求：<strong><em><a href="https://ubuntu.com" target="_blank" rel="noopener">Ubuntu</a> &gt;= 16.04</em></strong> or <strong><em><a href="https://www.debian.org" target="_blank" rel="noopener">Debian</a> &gt;= 9</em></strong>。</li></ol><h3 id="panel服务器配置">Panel服务器配置</h3><p><strong><em>登录Panel服务器</em></strong></p><p>创建MySQL证书文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -m 750 /etc/mysql/.ssh</span><br><span class="line">sudo chown -R <span class="variable">$USER</span>:mysql /etc/mysql/.ssh</span><br><span class="line"><span class="built_in">cd</span> /etc/mysql/.ssh</span><br></pre></td></tr></table></figure><p>创建MySQL证书，包括Panel服务器证书和Trojan服务器证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa 2048 &gt; ca-key.pem</span><br><span class="line">openssl req -sha1 -new -x509 -nodes -days 3650 -key ca-key.pem &gt; ca-cert.pem</span><br><span class="line">openssl req -sha1 -newkey rsa:2048 -days 730 -nodes -keyout server-key.pem &gt; server-req.pem</span><br><span class="line">openssl rsa -<span class="keyword">in</span> server-key.pem -out server-key.pem</span><br><span class="line">openssl x509 -sha1 -req -<span class="keyword">in</span> server-req.pem -days 730  -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 &gt; server-cert.pem</span><br><span class="line">openssl req -sha1 -newkey rsa:2048 -days 730 -nodes -keyout client-key.pem &gt; client-req.pem</span><br><span class="line">openssl rsa -<span class="keyword">in</span> client-key.pem -out client-key.pem</span><br><span class="line">openssl x509 -sha1 -req -<span class="keyword">in</span> client-req.pem -days 730 -CA ca-cert.pem -CAkey ca-key.pem -set_serial 01 &gt; client-cert.pem</span><br></pre></td></tr></table></figure><p>创建CA证书 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat server-cert.pem client-cert.pem &gt; ca.pem</span><br></pre></td></tr></table></figure></p><p>更新MySQL证书权限 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span>:mysql /etc/mysql/.ssh</span><br><span class="line">sudo chmod -R 750 /etc/mysql/.ssh</span><br></pre></td></tr></table></figure></p><p>修改MySQL配置文件 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mariadb.conf.d/50-server.cnf</span><br></pre></td></tr></table></figure></p><p>修改[mysqld]块中<code>bind-address</code>为<code>*</code>，并且在<code>bind-address = *</code>后添加如下几行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssl-ca=/etc/mysql/.ssh/ca-cert.pem</span><br><span class="line">ssl-cert=/etc/mysql/.ssh/server-cert.pem</span><br><span class="line">ssl-key=/etc/mysql/.ssh/server-key.pem</span><br></pre></td></tr></table></figure></p><p>重启MySQL并查看状态 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysql</span><br><span class="line">sudo systemctl status mysql</span><br></pre></td></tr></table></figure></p><p>登录MySQL <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>配置远程访问权限，其中<code>&lt;Trojan Server&gt;</code>改为你Trojan服务器的IP，<code>&lt;password&gt;</code>改为Trojan服务器访问Panel服务器的密码 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON trojan.* to trojan@<span class="string">'&lt;Trojan Server&gt;'</span> IDENTIFIED BY <span class="string">'&lt;password&gt;'</span> REQUIRE SSL;</span><br></pre></td></tr></table></figure></p><p>重新加载privileges并检查配置是否成功，随后退出mysql <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">SELECT User,Host FROM mysql.user;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></p><h3 id="trojan服务器配置">Trojan服务器配置</h3><p><strong><em>登录Trojan服务器</em></strong></p><p>安装mysql-client作为测试 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mariadb-client -y</span><br></pre></td></tr></table></figure></p><p>创建MySQL证书文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p -m 750 /etc/mysql/.ssh</span><br><span class="line">sudo chown -R <span class="variable">$USER</span>:certusers /etc/mysql/.ssh</span><br><span class="line"><span class="built_in">cd</span> /etc/mysql/.ssh</span><br></pre></td></tr></table></figure><p>使用你自己熟悉的工具将<code>/etc/mysql/.ssh/ca.pem</code>从Panel服务器转移到Trojan服务器。</p><p>这里以Xftp为例，Xftp和安装Xshell类似，自己安装。链接到Panel服务器后直接在Xshell菜单栏点击新建文件传输即可打开Xftp并自动连接，如图所示 <img src="MySQL-remote-config/链接xftp.jpg" alt="链接xftp"></p><p>在Xftp右侧服务器地址栏中输入<code>/etc/mysql/.ssh</code>并回车，双击<code>ca.pem</code>，<code>client-cert.pem</code>,<code>client-key.pem</code>即可将Panel服务器证书下载到本地。同理将证书从本地上传到Trojan服务器相同路径。这里要注意，若是登录的用户对<code>/etc/mysql/.ssh</code>没有写入权限会报错，可将文件转存到用户家目录修改权限为当前登录用户可读写即可。</p><p>更新MySQL证书权限 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span>:certusers /etc/mysql/.ssh</span><br><span class="line">sudo chmod -R 750 /etc/mysql/.ssh</span><br></pre></td></tr></table></figure></p><p>修改MySQL配置文件测试证书可用 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf</span><br></pre></td></tr></table></figure></p><p>在<code>[client]</code>中加入以下代码（若没有<code>[client]</code>则自己添加） <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssl-ca=/etc/mysql/.ssh/ca.pem</span><br><span class="line">ssl-cert=/etc/mysql/.ssh/client-cert.pem</span><br><span class="line">ssl-key=/etc/mysql/.ssh/client-key.pem</span><br></pre></td></tr></table></figure></p><p>测试链接到Panel服务器，其中<code>&lt;Panel Server&gt;</code>改为Panel服务器的IP或域名 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u trojan -h &lt;Panel Server&gt; -p</span><br></pre></td></tr></table></figure></p><p>检测是否使用SSL链接并退出MySQL <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">status</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>编辑Trojan配置文件，在<code>mysql</code>项中：1. <code>enable</code>改为<code>true</code>；2. <code>server_addr</code>填入Panel服务器域名；3. <code>password</code>填入配置数据库时为Trojan服务器设置的访问密码；4. <code>key</code>，<code>cert</code>，<code>ca</code>分别填入<code>/etc/mysql/.ssh/client-key.pem</code>，<code>/etc/mysql/.ssh/client-cert.pem</code>，<code>/etc/mysql/.ssh/ca.pem</code>。重启Trojan，并检查状态。</p><p><strong><em>可选：</em></strong>修改Trojan服务器的Nginx配置文件，反代地址改为Panel服务器地址，这样Trojan服务器可以作为Panel服务器的镜像存在，改完记得重启nginx。</p><h3 id="测试">测试</h3><p>Trojan客户端填入Trojan服务器地址和Panel中用户名密码测试是否可以正常使用。</p><h3 id="原理参考">原理参考</h3><p><a href="https://stackoverflow.com/questions/42145925/mariadb-over-ssl-not-working-certificate-verify-failed" target="_blank" rel="noopener">MariaDB over SSL not working, “certificate verify failed”</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trojan </tag>
            
            <tag> MySQL </tag>
            
            <tag> remote </tag>
            
            <tag> Panel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trojan-Panel配置</title>
      <link href="/2019/06/08/p43.html"/>
      <url>/2019/06/08/p43.html</url>
      
        <content type="html"><![CDATA[<h3 id="期望效果">期望效果</h3><p>Panel与Trojan共存并且隐藏Panel访问路径。</p><h3 id="前置条件">前置条件</h3><ol type="1"><li>本文假设你已完全理解<a href="/2019/04/10/p41.html">自建梯子教程 --Trojan版本</a>，否则请先按照<a href="/2019/04/10/p41.html">自建梯子教程 --Trojan版本</a>配置好服务器；</li><li><strong><em>不能</em></strong>使用<code>root</code>用户，但是要确保用户具有sudo权限，使用配置Trojan的时候的同一个账户也是可以的<a href="/2019/04/10/p41.html#createuser">参考</a>；</li><li>系统要求：<strong><em><a href="https://ubuntu.com" target="_blank" rel="noopener">Ubuntu</a> &gt;= 16.04</em></strong> or <strong><em><a href="https://www.debian.org" target="_blank" rel="noopener">Debian</a> &gt;= 9</em></strong>。</li></ol><h3 id="配置">配置</h3><h4 id="更新源">更新源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h4 id="安装依赖">安装依赖</h4><h5 id="安装基础依赖">安装基础依赖</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nginx curl git unzip</span><br></pre></td></tr></table></figure><h5 id="安装数据库">安装数据库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y mariadb-server</span><br></pre></td></tr></table></figure><h5 id="安装php">安装PHP</h5><h6 id="ubuntu-16.04-需要从ppa源安装">Ubuntu 16.04 需要从ppa源安装</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y software-properties-common</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php7.2-fpm php7.2-mysql php7.2-cli php7.2-xml php7.2-json php7.2-mbstring php7.2-tokenizer php7.2-bcmath</span><br></pre></td></tr></table></figure><h5 id="debian-9-需要从ppa源安装">Debian 9 需要从ppa源安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -q https://packages.sury.org/php/apt.gpg -O- | sudo apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://packages.sury.org/php/ stretch main"</span> | sudo tee /etc/apt/sources.list.d/php.list</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php7.2-fpm php7.2-mysql php7.2-cli php7.2-xml php7.2-json php7.2-mbstring php7.2-tokenizer php7.2-bcmath</span><br></pre></td></tr></table></figure><h6 id="其他系统ubuntu-18.04-or-debian-10">其他系统(<a href="https://ubuntu.com" target="_blank" rel="noopener">Ubuntu</a> &gt;= 18.04 or <a href="https://www.debian.org" target="_blank" rel="noopener">Debian</a> &gt;= 10)</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y php-fpm php-mysql php-cli php-xml php-json php-mbstring php-tokenizer php-bcmath</span><br></pre></td></tr></table></figure><h4 id="配置数据库">配置数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><ol type="1"><li>这里要输入数据库的<code>root</code>用户的密码，由于是新安装的数据库，故直接回车就好；</li><li>y，设置数据库密码，一会儿要用，建议与Trojan的全局密码相同，方便记忆，因为配置完Panel之后Trojan的全局密码就没用了。</li><li>数据库密码；</li><li>确认数据库密码；</li><li>四个y。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p>输入数据库<code>root</code>用户的密码，该密码是在配置数据库的时候设置的。</p><p>下面的两条命令创建了一个叫<code>trojan</code>的数据库和一个叫<code>trojan</code>数据库用户，<code>trojan</code>的密码为<code>&lt;password&gt;</code>，建议与Trojan的全局密码相同，后面要用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE trojan;</span><br><span class="line">GRANT ALL PRIVILEGES ON trojan.* to trojan@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'&lt;password&gt;'</span>;</span><br></pre></td></tr></table></figure><p>下面的命令重新加载privileges并检查配置是否成功，随后退出mysql。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">SELECT User,Host FROM mysql.user;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><h4 id="安装php软件包管理系统">安装PHP软件包管理系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br><span class="line">sudo curl -sS https://getcomposer.org/installer -o composer-setup.php</span><br><span class="line">sudo php composer-setup.php --install-dir=/usr/<span class="built_in">local</span>/bin --filename=composer</span><br></pre></td></tr></table></figure><h4 id="安装nodejs和npm">安装NodeJS和npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h4 id="安装trojan-panel">安装Trojan-Panel</h4><p>注意，下面第二条命令将trojan-panel权限移交给你当前用户，要求这个用户是具有<code>sudo</code>权限的非<code>root</code>用户（新建这类账户请参考<a href="/2019/04/10/p41.html#createuser">自建梯子教程 --Trojan版本</a>）。如果使用<code>root</code>用户执行<code>npm install</code>是会报错的，如果确实需要使用<code>root</code>执行的话，那么在前面加<code>sudo</code>可以解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://github.com/trojan-gfw/trojan-panel.git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> trojan-panel</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> trojan-panel</span><br><span class="line">composer install</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="配置trojan-panel运行环境">配置Trojan-Panel运行环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp .env.example .env</span><br><span class="line">php artisan key:generate</span><br><span class="line">sudo nano .env</span><br></pre></td></tr></table></figure><p>其中APP_URL和DB_PASSWORD分别是你的域名和数据库密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure><h4 id="赋予权限">赋予权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">sudo chown -R www-data:www-data /var/www/trojan-panel</span><br></pre></td></tr></table></figure><h4 id="配置nginx">配置Nginx</h4><p>下面是包含Panel的Nginx配置文件，自己参考<a href="/2019/04/10/p41.html#nginxconfig">自建梯子教程 --Trojan版本</a>中配置Nginx节的说明修改。另外新增的配置要修改的地方有：1. 这段代码中的config关键字，你大可以修改为你自己喜欢的而且不易被猜中的；<strong><em>2. 第18行的PHP版本修改为系统中安装的PHP版本，PHP版本号用<code>php -v</code>命令查看。</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80 default_server;</span><br><span class="line"></span><br><span class="line">    server_name &lt;tdom.ml&gt;;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://www.ietf.org;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /config &#123;</span><br><span class="line">        <span class="built_in">alias</span> /var/www/trojan-panel/public;</span><br><span class="line">        index index.php;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ @config;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            include snippets/fastcgi-php.conf;</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME <span class="variable">$request_filename</span>;</span><br><span class="line">            fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.(?!well-known).* &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location @config &#123;</span><br><span class="line">        rewrite /config/(.*)$ /config/index.php?/<span class="variable">$1</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80;</span><br><span class="line"></span><br><span class="line">    server_name &lt;10.10.10.10&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://&lt;tdom.ml&gt;<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">       root /var/www/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启nginx">重启Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h4 id="更新trojan配置文件">更新Trojan配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /usr/<span class="built_in">local</span>/etc/trojan/config.json</span><br></pre></td></tr></table></figure><p>将<code>mysql</code>中的<code>enabled</code>改为<code>true</code>，<code>password</code>填写刚才为数据库用户<code>trojan</code>设置的密码。</p><h4 id="重启trojan">重启Trojan</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart trojan</span><br></pre></td></tr></table></figure><h3 id="测试">测试</h3><p>浏览器中访问：<a href="https://yourdomain.com/config" target="_blank" rel="noopener">https://yourdomain.com/config</a>看看是否可以访问Trojan-Panel，如果可以访问Trojan-Panel的话，那么就可以注册账户了。第一个注册的用户是管理员，用户要使用需要管理员审核，即<strong><em>将用户的Quota设为-1</em></strong>。客户端配置文件中的密码填写在Panel注册的用户信息："Username:Password"。</p><h3 id="panel展示">Panel展示</h3><p>欢迎页 <img src="p43/screenshot1.png" alt="Trojan-Panel welcome page"> 登录页 <img src="p43/screenshot2.png" alt="Trojan-Panel login page"> 注册页 <img src="p43/screenshot3.png" alt="Trojan-Panel register page"> 用户列表 <img src="p43/screenshot4.png" alt="Trojan-Panel user list"></p><h3 id="参考">参考</h3><p><a href="https://github.com/trojan-gfw/trojan-panel/wiki/Installation-on-Ubuntu-18.04-LTS" target="_blank" rel="noopener">Trojan-Panel Wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 代理工具 </tag>
            
            <tag> GFW </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> vps </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Trojan </tag>
            
            <tag> Trojan-GFW </tag>
            
            <tag> Nginx </tag>
            
            <tag> Panel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建梯子教程 --Trojan版本</title>
      <link href="/2019/04/10/p41.html"/>
      <url>/2019/04/10/p41.html</url>
      
        <content type="html"><![CDATA[<h3 id="综述">综述</h3><h4 id="本文简介">本文简介</h4><p>本文总结了自己在VPS搭建<a href="https://github.com/trojan-gfw/trojan" target="_blank" rel="noopener">Trojan-GFW</a>代理过程中遇到的各种坑，以及最后的解决方案，以供大家参考。</p><p>本文的宗旨在于，将大量重复性的工作集中到配置过程中，以让使用过程尽量简单。所以本文的配置过程相较于网上的某些教程稍微复杂一点，但是如果严格按照本文配置过程配置的话，那么配置完成之后服务器端就可以几乎不用搭理他了，然后客户端几乎是拿到手就可以使用，特别适合有好几个人一起共享的情况。</p><p>本文将按操作顺序介绍部署用于trojan代理服务的VPS服务器的详细过程，按照步骤操作一切正常的话一小时之内即可配置成功。如果配置过程中有什么疑问，欢迎在留言区交流！</p><h4 id="trojan工作原理浅析">Trojan工作原理浅析</h4><p>Trojan是一个比较新的翻墙软件，在设计时采用了更适应国情的思路。在穿透GFW时，人们认为强加密和随机混淆可能会欺骗GFW的过滤机制。然而，Trojan实现了这个思路的反面：它模仿了互联网上最常见的HTTPS协议，以诱骗GFW认为它就是HTTPS，从而不被识别。 <img src="p41/工作原理.svg" alt="Trojan工作原理"> 如图所示，Trojan工作在443端口，并且处理来自外界的HTTPS请求，如果是合法的Trojan请求，那么为该请求提供服务，否则将该流量转交给web服务器Nginx，由Nginx为其提供服务。基于这个工作过程可以知道，Trojan的一切表现均与Nginx一致，不会引入额外特征，从而达到无法识别的效果。当然，为了防止恶意探测，我们需要将80端口的流量全部重定向到443端口，并且服务器只暴露80和443端口，这样可以使得服务器与常见的Web服务器表现一致。</p><h3 id="前置条件">前置条件</h3><p><a name="SystemRequire"></a></p><p><strong><em>系统要求：<a href="https://ubuntu.com" target="_blank" rel="noopener">Ubuntu</a> &gt;= 16.04</em></strong> or <strong><em><a href="https://www.debian.org" target="_blank" rel="noopener">Debian</a> &gt;= 9</em></strong> or <strong><em><a href="https://centos.org" target="_blank" rel="noopener">CentOS</a> &gt;= 7</em></strong>。</p><h3 id="vps服务器购买">VPS服务器购买</h3><h4 id="注册vultr">注册vultr</h4><p>我使用的服务器是vultr。主要因为其按小时计费，随时可以停用服务器。这一点很重要，现在gfw相当高，所以你买到的机器很可能是已经被墙了的。其次，vultr本身没有被墙，这一点很重要，不然就是先有鸡还是先有蛋的问题了。当然，可以支付宝或微信付款也是一个加分点。vultr充值10美元送10美元活动注册地址：<a href="https://www.vultr.com/?ref=7241747" target="_blank" rel="noopener">https://www.vultr.com</a>。点击链接跳转到vultr，网页右上角有个Create Account就是注册的地方了，接下来就是注册并激活账号了。</p><h4 id="充值">充值</h4><p>在购买服务器之前需要先充值。登陆vultr之后如图Billing-&gt;Alipay，选好要充值的金额数，然后Pay with Alipay即可跳转到支付宝扫码支付页面。 <img src="p41/Billing.jpg" alt="Billing"></p><h4 id="购买服务器">购买服务器</h4><p>点击vultr网页右上角的蓝色+图标即可为账户添加服务器。 <img src="p41/addServer.jpg" alt="addServer"></p><p><strong>注意</strong>：向下滚动有很多选项，不要直接点击Deploy Now，这样会使用默认参数，但不是我们想要的！ 第一个选项为选择服务器类型（Choose Server），这里选择Cloud Compute。 <img src="p41/chooseServer.jpg" alt="服务器类型，选择Cloud Compute"></p><p>第二个选项为选择服务器地址（Server Location），建议选择硅谷（Silicon Valley，离google最近），而不要选择日本（用的人多，大部分IP已经被墙）； <img src="p41/服务器地点.jpg" alt="服务器地点"></p><p>第三个选项为选择服务器类型（Server Type），即选择服务器操作系统。作为示例，这里我们选择选择<strong><em>Ubuntu 18.10 x64（强烈推荐）</em></strong>，不过<a href="#SystemRequire">系统要求</a>部分所列出的操作系统均已测试通过，同一个发行版本的系统在我要求以下的版本测试不通过。注意如果你使用其他vps服务商的vps，可能有minimal选项，不能选择那一个，很多依赖乃没有安装，会导致自己配置失败（当然也可以，缺少哪个依赖自己再用apt安装就好了，例如：<code>apt install -y sudo</code>，<code>sudo apt install -y vim</code>等）。最后，如果你确实是有其他系统或者比较旧的系统版本需要安装trojan的话，建议使用docker，正文中部分配置只需要做细微修改即可，为了文章的整体性我就不放在正文了，请<a href="https://github.com/trojan-tutor/trojan-tutor.github.io/issues/1" target="_blank" rel="noopener">参考评论区</a>。 <img src="p41/服务器类型.jpg" alt="服务器类型"></p><p>第四个选项为选择服务器大小（Server Size），即选择服务器硬件性能。因为我们使用VPS服务器翻墙，所以性能瓶颈不在配置，而在网络带宽之类的。由于vultr的服务器带宽都是100M的，所以服务器当然是往便宜了选。当然，<code>$2.5/mo</code>的一般都是缺货的。选择<code>$5/mo</code>的就好，一个月三十几块钱，要是有好几个人一起分担的话就相当实惠了。 <img src="p41/服务器大小.jpg" alt="服务器大小"></p><p>第五、六、七三个选项可以不用管它。</p><p>第八条要求为即将部署的服务器命名并给一个标签，随意就好。</p><p>此时可以点击右下角的现在部署（Deploy Now），vultr即开始分配资源，安装系统。此时Servers页面可以看到服务器信息，状态显示installing。当状态切换为Running的时候，服务器就可以使用了。 <img src="p41/服务器标签.jpg" alt="服务器标签"></p><h4 id="服务器信息查看">服务器信息查看</h4><p>服务器安装结束之后在Servers页面点击刚才购买的服务器名字即可跳转到服务器详情页。如图右上角有一个View console可以直接通过网页连接到服务器，但是由于它不支持复制粘贴，不方便，我们需要使用第三方工具连接到服务器。所以需要知道IP、用户名和密码，如图左下角。 <img src="p41/服务器信息.jpg" alt="服务器信息"></p><h3 id="域名申请与解析">域名申请与解析</h3><p><a name="domain"></a></p><p>trojan需要一个域名用来做伪装，所以需要先申请一个域名。如果自己已经有域名了那么可以不用申请，直接用一个子域名就可以了。如果你只是用来翻墙没有其他作用，那么建议注册一个免费域名即可。本教程使用freenom免费域名为例。</p><h4 id="freenom免费域名申请">freenom免费域名申请</h4><p><strong><em>我自己在使用Edge注册freenom的时候会失败，使用<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">chrome</a>才可以，你如果也失败了请换一个浏览器试试！</em></strong></p><p><strong><em>freenom在检测到ip对应的国家和你填写的个人信息不一致就会不允许你注册，所以要么不要挂VPN去申请域名，要么去网上生成虚拟美国人信息。</em></strong></p><p>freenom注册地址在这里<a href="https://www.freenom.com" target="_blank" rel="noopener">https://www.freenom.com</a>，支持简体中文，可以自行切换。在寻找一个免费域名的输入框中输入自己理想的域名点击检查可用性，如图所示。检查到可用的中意的域名之后，点击现在获取即可锁定该域名。 <img src="p41/检查域名可用性.jpg" alt="检查域名可用性"></p><p>现在可以点击完成按钮跳转到DNS配置和申请年限界面。点击Use DNS&gt;&gt;Use Frenom DNS Service。两个IP address框都直接<strong><em>输入你购买的VPS服务器的IP地址</em></strong>。Period选择12 Months @ FREE，然后点击Continue，输入并验证你的邮箱和信息即可。<strong><em>注意上面的提示，不要挂VPN，很多人会卡在验证账户的地方，一般都是挂了VPN导致的。</em></strong> <img src="p41/使用期限设置.jpg" alt="使用期限设置"></p><h4 id="付费域名推荐">付费域名推荐</h4><p>在freenom申请的免费域名是可以无限免费续期的，除非被人花钱抢注，所以自己每隔几个月回来续期一下就可以啦（似乎现在已经不能免费续期了）。反正这个域名只是拿来翻墙用，被人抢注了马上换一个成本也不大。如果介意这个的话，建议自己买付费域名。国外域名服务商推荐<a href="https://namecheap.pxf.io/c/2313928/408285/5618" target="_blank" rel="noopener">namecheap</a>，博主自己用的也是<a href="https://namecheap.pxf.io/c/2313928/408285/5618" target="_blank" rel="noopener">namecheap</a>的付费域名。<a href="https://namecheap.pxf.io/c/2313928/408285/5618" target="_blank" rel="noopener">namecheap</a>有一个好处就是免费送个人信息保护功能WhoisGuard，这样无法通过whois查询到域名注册信息，所以不会收到各种广告和避免被查水表的可能。<strong><em>不要买国内域名服务商的域名</em></strong>。</p><h3 id="vps服务器部署">VPS服务器部署</h3><p><strong><em>跳过了上面系统选择与购买部分的要注意啦，本教程目前<a href="#SystemRequire">测试通过</a>操作系统版本是Ubuntu 16.04 or Debian 9 or CentOS 7及以上，更低版本系统无法成功搭建，其他系统尚未测试！</em></strong></p><p><strong><em>跳过了上面系统选择与购买部分的要注意啦，本教程目前<a href="#SystemRequire">测试通过</a>操作系统版本是Ubuntu 16.04 or Debian 9 or CentOS 7及以上，更低版本系统无法成功搭建，其他系统尚未测试！</em></strong></p><p><strong><em>跳过了上面系统选择与购买部分的要注意啦，本教程目前<a href="#SystemRequire">测试通过</a>操作系统版本是Ubuntu 16.04 or Debian 9 or CentOS 7及以上，更低版本系统无法成功搭建，其他系统尚未测试！</em></strong></p><h4 id="远程工具安装">远程工具安装</h4><p>本文使用的第三方远程管理工具叫做<a href="https://www.netsarang.com/products/xsh_overview.html" target="_blank" rel="noopener">Xshell</a>。Xshell学生和家庭版是免费的，可以放心试用（<strong><em>觉得好用的话，不差钱的各位也可以注册一下支持软件开发者噢</em></strong>）。安装好Xshell之后即可开始连接服务器进行部署了。不过Xshell没有Mac端，所以Mac可以使用其他ssh客户端，甚至直接用终端都可以，用法大同小异。</p><h4 id="连接服务器">连接服务器</h4><p>启动Xshell，从菜单栏的文件-&gt;新建打开新建会话窗口如下图。会话名称随便取一个都可以，主机填写刚才记下来的服务器IP地址或者直接填域名也是可以的。点击确定立即尝试连接服务器，如果能连接上服务器会提示输入用户名和密码。用户名为<code>root</code>，密码可以从vultr服务器详情页拷贝过来。可以记住用户名和密码，这样下次连接就不用再输入那个复杂的密码了（当然密码是可以修改的，但是没必要。系统自动生成的密码强度相当高，可以避免暴力破解。自己设的密码就不好说了，而且还容易忘记）。 <img src="p41/新建会话.jpg" alt="新建会话"></p><p>连接成功之后会出现命令提示符：<code>root@username:~#</code>。 <img src="p41/Xshell.jpg" alt="新建会话"></p><p>连接上服务器后就可以开始安装Trojan了。对于Xshell连不上服务器的情况，如果是使用域名连接的话，先<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">ping</a>一下域名看看是否DNS解析尚未生效，如果尚未生效，那么需要等一下，在等待的过程中可以先用IP将服务器配置好。如果<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">ping</a>不通IP的话，那么多半是被墙了，那就只能换掉服务器了。（<strong>血的教训</strong>：先购买新服务器，再去vultr服务器页面Destroy。反过来的话间隔太小，估计又买到原来的ip了。或者直接开个四五台服务器，然后保留<a href="http://ping.chinaz.com/" target="_blank" rel="noopener">ping</a>结果最好的，删除其余的就好了。）</p><h4 id="创建用户账户可选">创建用户账户（可选）</h4><p><a name="createuser"></a></p><p>为了系统安全，一般不建议直接使用<code>root</code>用户对系统做设置，而vultr默认只有<code>root</code>用户，故可以自己新建一个非<code>root</code>但是有<code>sudo</code>权限的用户继续后面的操作，代码如下所示，注意密码强度不能太低。第一条命令创建用户，第二条命令设置密码，第三条命令将该用户加入<code>sudo</code>组，第四条命令切换到该用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash trojanuser</span><br><span class="line">sudo passwd trojanuser</span><br><span class="line">sudo usermod -G sudo trojanuser</span><br><span class="line">su -l trojanuser</span><br></pre></td></tr></table></figure><h4 id="创建服务账户">创建服务账户</h4><p>很多看教程的小伙伴问“为什么非要弄这么多用户，直接root不可以吗？”，这里简单回答一下。既然Trojan是占用443端口，使用https协议，所以必然是要安装证书的。本教程使用<a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">acme.sh</a>为Trojan生成证书，并配置了acme.sh的自动更新，包括代码和证书的更新。一方面，既然有配置自动更新就有可能出各种问题，毕竟你对更新之后的代码和证书是否可用一无所知。另一方面，acme.sh和Trojan均为开源软件，不一定值得信赖。基于此，为了降低acme.sh和Trojan对系统的影响和其相互影响，故需要单独为acme.sh和Trojan建立没有<code>sudo</code>权限的用户。如果执意使用具有<code>sudo</code>权限的用户，或者头铁直接使用<code>root</code>，出了问题是要自己承担责任的。</p><p>这里我们创建两个用户，分别为<code>trojan</code>和<code>acme</code>。其中用户<code>trojan</code>只需要运行<code>trojan</code>服务，无需登录，也无需家目录，故设置为系统用户即可。这里将用户<code>acme</code>也设置为系统用户，但是区别在于<code>acme</code>需要配置acme.sh，故需要家目录。注意到，我并未给用户<code>acme</code>设置密码，所以该用户也不能登录，只能通过其他已经登录的用户切换过去，这样尽可能的保证了系统的安全与任务的独立。因为<code>trojan</code>和<code>acme</code>都需要读写证书文件，所以将<code>acme</code>和<code>trojan</code>添加到同一个用户组<code>certusers</code>，待申请到证书后将证书所有权交给用户组<code>certusers</code>并允许组内用户访问即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd certusers</span><br><span class="line">sudo useradd -r -M -G certusers trojan</span><br><span class="line">sudo useradd -r -m -G certusers acme</span><br></pre></td></tr></table></figure><h4 id="安装依赖">安装依赖</h4><p>由于Debian系列系统和CentOS系列系统使用不同的包管理软件，所以安装软件的命令不一样，下面两个小节自己对照自己系统选择命令。</p><h5 id="ubuntu-or-debian">Ubuntu or Debian</h5><p>更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><p>安装acme.sh需要的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y socat cron curl</span><br></pre></td></tr></table></figure><p>启动crontab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start cron</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> cron</span><br></pre></td></tr></table></figure><p>安装Trojan需要的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y libcap2-bin xz-utils nano</span><br></pre></td></tr></table></figure><p>安装Nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y nginx</span><br></pre></td></tr></table></figure><h5 id="centos">CentOS</h5><p>安装acme.sh需要的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y socat cronie curl</span><br></pre></td></tr></table></figure><p>启动crontab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start crond</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> crond</span><br></pre></td></tr></table></figure><p>安装Trojan需要的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y xz nano</span><br></pre></td></tr></table></figure><p>安装Nginx。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure><h4 id="配置nginx">配置Nginx</h4><p><strong><em>若你已经有配置Nginx虚拟主机，配置Nginx之前请，可以自己使用<code>cp</code>命令备份一下原来的虚拟主机，等介绍完基本配置再讲如何与现有服务集成。</em></strong></p><h5 id="关闭默认虚拟主机">关闭默认虚拟主机</h5><p><a name="nginxconfig"></a></p><p>由于Nginx配置在Debian系列系统和CentOS系列系统组织方式不同，所以配置文件位置和使用方式有细微区别，为了统一，我将CentOS系列系统的组织结构做细微调整。</p><p>在Debian系列系统中，Nginx的虚拟主机配置文件在<code>/etc/nginx/sites-available/</code>文件夹中，如果要开启某一个虚拟主机，则建立一个软连接到<code>/etc/nginx/sites-enabled/</code>文件夹并重启Nginx即可。默认虚拟主机在<code>/etc/nginx/sites-enabled/</code>文件夹，需要关闭掉，否则会冲突。</p><p>在CentOS系列系统中，Nginx的虚拟主机配置文件在<code>/etc/nginx/conf.d/</code>文件夹中以<code>.conf</code>后缀保存，写入之后就可以使用。默认虚拟主机集成在Nginx配置文件<code>/etc/nginx/nginx.conf</code>中，需要打开将其中的server块删除，否则会冲突。Debian系列系统中的<code>/etc/nginx/sites-enabled/</code>和<code>/etc/nginx/sites-available/</code>文件夹结构在CentOS系列系统中是没有的，不过这个策略很不错，可以很方便的开启和关闭虚拟主机，我这里手动调整一下。</p><h6 id="centos-1">CentOS</h6><p>按上述分析，我们使用下面两条命令在<code>/etc/nginx/</code>中添加两个文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/sites-available</span><br><span class="line">sudo mkdir /etc/nginx/sites-enabled</span><br></pre></td></tr></table></figure><p>执行如下命令使用nano打开Nginx配置文件，删除其中server块，并添加对<code>/etc/nginx/sites-enabled/</code>文件夹的索引。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>配置文件修改结果如下图所示。 <img src="p41/etc_nginx_nginx_conf.jpg" alt="etc_nginx_nginx_conf"></p><p>CentOS反向代理需要配置SELinux允许httpd模块可以联网，否则服务器会返回502错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo setsebool -P httpd_can_network_connect <span class="literal">true</span></span><br></pre></td></tr></table></figure><h6 id="ubuntu-or-debian-1">Ubuntu or Debian</h6><p>使用如下命令关闭Nginx默认虚拟主机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><h5 id="写入虚拟主机到nginx配置文件">写入虚拟主机到Nginx配置文件</h5><p>1.执行如下命令，使用<code>nano</code>添加虚拟主机。(<strong><em>注意域名<code>&lt;tdom.ml&gt;</code>改为你自己的域名，这是虚拟主机的文件名，只是用来自己识别的。</em></strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/&lt;tdom.ml&gt;</span><br></pre></td></tr></table></figure><p>基于综述部分讲解的Trojan工作原理，现给定Nginx虚拟主机如下所示。这些虚拟主机可以直接拷贝到上面虚拟主机配置文件中再修改为你自己的，其中要修改的地方包括：</p><ol type="1"><li>第4行的<code>server_name</code>的值<code>&lt;tdom.ml&gt;</code>改为你自己的域名；</li><li>第7行的<code>proxy_pass</code>随便指向一个没有敏感信息的网站都可以，这就是你要反向代理的网站，这里我是用了RFC文档的地址；</li><li>第15行的<code>server_name</code>的值<code>&lt;10.10.10.10&gt;</code>改为你自己的IP；</li><li>第17行<code>&lt;tdom.ml&gt;</code>改为自己的域名，注意别填错了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80 default_server;</span><br><span class="line"></span><br><span class="line">    server_name &lt;tdom.ml&gt;;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass https://www.ietf.org;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:80;</span><br><span class="line"></span><br><span class="line">    server_name &lt;10.10.10.10&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://&lt;tdom.ml&gt;<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line"></span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /.well-known/acme-challenge &#123;</span><br><span class="line">       root /var/www/acme-challenge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下这些虚拟主机的一些细节：第一个server接收来自Trojan的流量，与上面Trojan配置文件对应；第二个server也是接收来自Trojan的流量，但是这个流量尝试使用IP而不是域名访问服务器，所以将其认为是异常流量，并重定向到域名；第三个server接收除127.0.0.1:80外的所有80端口的流量并重定向到443端口，这样便开启了全站https，可有效的防止恶意探测，其中<code>.well-known</code>是为申请证书所准备的，下文用到的时候自然明白。注意到，第一个和第二个server对应综述部分原理图中的蓝色数据流，第三个server对应综述部分原理图中的红色数据流，综述部分原理图中的绿色数据流不会流到Nginx。</p><p>2.使能配置文件<strong><em>注意域名<code>&lt;tdom.ml&gt;</code>改为你自己的域名</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/&lt;tdom.ml&gt; /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><h5 id="启动nginx">启动Nginx</h5><p>Nginx启动命令和Trojan一样，就不过多解释了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h4 id="配置证书">配置证书</h4><p>当从Let’s Encrypt获得证书时，Let’s Encrypt会验证证书中域名的控制权。一般采用HTTP-01或DNS-01方式来验证，详情参考官方文档<a href="https://letsencrypt.org/zh-cn/docs/challenge-types/" target="_blank" rel="noopener">验证方式</a>。本文使用HTTP-01方式验证，若需要使用DNS-01方式验证，参考acme.sh官方文档<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi" target="_blank" rel="noopener">How to use DNS API</a>。</p><h5 id="创建证书文件夹">创建证书文件夹</h5><p>第一条命令新建一个文件夹<code>/etc/letsencrypt/live</code>用于存放证书。第二条命令将证书文件夹所有者改为<code>acme</code>，使得用户<code>acme</code>有权限写入证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/letsencrypt/live</span><br><span class="line">sudo chown -R acme:acme /etc/letsencrypt/live</span><br></pre></td></tr></table></figure><h5 id="创建webroot并修改所有者">创建webroot并修改所有者</h5><p>本文使用acme.sh的http方式申请证书，http方式需要在网站根目录下放置一个文件来验证域名所有权，故需要acme.sh和nginx均对webroot目录有权限，故将运行Nginx的worker进程加入certusers组，下文再将webroot目录附加给certusers组即可。</p><p>在不同的Linux发新版本中，nginx可能使用不同的用户运行<code>worker process</code>，可能为<code>www-data</code>，<code>nginx</code>，<code>nobody</code>中的一个，故需要自己运行下述命令查找<code>nginx: worker process</code>所属用户： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo user,command|grep nginx</span><br></pre></td></tr></table></figure></p><p>上述命令输出第二行第一列即为<code>nginx: worker process</code>所属用户，然后根据实际情况，运行下面三个命令之一： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -G certusers www-data</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -G certusers nginx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -G certusers nobody</span><br></pre></td></tr></table></figure><p>运行下面两条命令，第一条命令新建一个文件夹<code>/var/www/acme-challenge</code>用于给acme.sh存放域名验证文件。第二条命令将证书文件夹所有者改为<code>acme</code>，使得用户<code>acme</code>有权限写入文件，同时当验证的时候Nginx可以读取该文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p  /var/www/acme-challenge</span><br><span class="line">sudo chown -R acme:certusers /var/www/acme-challenge</span><br></pre></td></tr></table></figure><h5 id="安装acme.sh自动管理ca证书脚本">安装acme.sh自动管理CA证书脚本</h5><p><strong><em>分别</em></strong>执行如下命令，注意看是否报错。第一条命令切换到用户<code>acme</code>。第二条命令安装acme.sh。第三条命令退出当前用户。第四条命令再次切换到用户<code>acme</code>。注意到这里两次切换用户的操作不能省略，因为安装完acme.sh之后要重新登录当前用户，否则无法识别出acme.sh命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -l -s /bin/bash acme</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su -l -s /bin/bash acme</span><br></pre></td></tr></table></figure><h5 id="申请证书">申请证书</h5><p>执行如下命令将默认CA修改为Let's Encrypt：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --<span class="built_in">set</span>-default-ca  --server  letsencrypt</span><br></pre></td></tr></table></figure><p>执行如下命令（<strong><em>注意域名<code>&lt;tdom.ml&gt;</code>改为你自己的域名</em></strong>），等待一会儿。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue -d &lt;tdom.ml&gt; -w /var/www/acme-challenge</span><br></pre></td></tr></table></figure></p><p>看到下图的提示表示证书申请成功。 <img src="p41/证书申请成功提示.jpg" alt="证书申请成功提示"></p><p><strong><em>申请失败怎么办？</em></strong>证书申请失败的可能性一般有：1. 文件夹权限问题，请仔细检查每一步是否都正确；2. 证书申请次数超限，此时<strong><em>切忌反复尝试</em></strong>。证书每一个周申请次数是有限制的（20次），如果超限了就需要等一个周或者更换域名了（这个限制是争对每一个子域单独做的限制，所以万一超限了还可以用子域名继续部署）。解决方案是：在上述命令后加<code>--staging</code>参数继续测试。测试通过之后，删除上图所示四个证书文件以及该域名对应文件夹并<strong><em>取消<code>--staging</code>参数</em></strong>再执行一次。<code>--staging</code>参数申请的证书只作为测试用，客户端是无法认证通过的（提示<code>SSL handshake failed: tlsv1 alert unknown ca</code>），所以使用<code>--staging</code>参数申请到了证书之后要去掉<code>--staging</code>参数重新申请一次。</p><h5 id="安装证书">安装证书</h5><p>执行如下命令（<strong><em>注意域名<code>&lt;tdom.ml&gt;</code>改为你自己的域名</em></strong>），第一条命令使用acme.sh将证书安装到<code>certfiles</code>目录，这样acme.sh更新证书的时候会自动将新的证书安装到这里。第二条命令是配置acme.sh自动更新和自动更新证书，这样配置完Trojan之后一般不用管服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d &lt;tdom.ml&gt; --key-file /etc/letsencrypt/live/private.key --fullchain-file /etc/letsencrypt/live/certificate.crt</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --upgrade  --auto-upgrade</span><br></pre></td></tr></table></figure><h5 id="修改权限">修改权限</h5><p>最后还要允许组内用户访问证书。可通过如下命令实现。第一条命令将证书文件夹所在用户组改为<code>certusers</code>。第二条命令是赋予证书文件夹组内用户读取权限。运行这两条命令之后用户<code>trojan</code>就有权限读取证书了。第三条命令退出用户<code>acme</code>，因为证书已经安装完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R acme:certusers /etc/letsencrypt/live</span><br><span class="line">chmod -R 750 /etc/letsencrypt/live</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="配置trojan">配置Trojan</h4><h5 id="安装trojan">安装Trojan</h5><p>分别执行如下四个命令，注意看是否报错。第一个命令是安装Trojan，安装完成一般会提示版本号注意看是否是最新版本。第二个命令是将Trojan配置文件的所有者修改为用户<code>trojan</code>，由于使用<code>sudo</code>安装的Trojan，该配置文件默认是属于<code>root</code>用户的，而我们需要使用用户<code>trojan</code>运行Trojan，不修改所有者会导致启动Trojan遇到权限问题。第三个命令备份Trojan配置文件，以防万一。第四个命令是使用nano修改配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R trojan:trojan /usr/<span class="built_in">local</span>/etc/trojan</span><br><span class="line">sudo cp /usr/<span class="built_in">local</span>/etc/trojan/config.json /usr/<span class="built_in">local</span>/etc/trojan/config.json.bak</span><br><span class="line">sudo nano /usr/<span class="built_in">local</span>/etc/trojan/config.json</span><br></pre></td></tr></table></figure><p>第四个命令执行完之后屏幕会显示Trojan的配置文件，定位到<code>password</code>、<code>cert</code>和<code>key</code>并修改。密码按自己喜好，<code>cert</code>和<code>key</code>分别改为<code>/etc/letsencrypt/live/certificate.crt</code>和<code>/etc/letsencrypt/live/private.key</code>。编辑完成配置文件之后按屏幕下方快捷键提示（<code>^O</code>和<code>^X</code>即：<code>Ctrl+O</code>和<code>Ctrl+X</code>）保存并退出nano。修改之后的config文件如图所示。另外，如果有<code>IPv6</code>地址，将<code>local_addr</code>的<code>0.0.0.0</code>改为<code>::</code>才可以使用。 <img src="p41/修改config.jpg" alt="修改config"></p><h5 id="启动trojan">启动Trojan</h5><h6 id="修改trojan启动用户">修改Trojan启动用户</h6><p>执行如下命令，打开<code>trojan.service</code>文件，并将用户修改为<code>trojan</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/trojan.service</span><br></pre></td></tr></table></figure><p>添加用户效果如图所示，注意等号旁边没有空格。 <img src="p41/changeUser.jpg" alt="添加trojan用户到trojan.service"></p><p>然后重新加载配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><h6 id="赋予trojan监听443端口能力">赋予Trojan监听443端口能力</h6><p>执行如下命令，赋予Trojan监听1024以下端口的能力，使得Trojan可以监听到443端口。这是由于我们使用非<code>root</code>用户启动Trojan，但是Linux默认不允许非<code>root</code>用户启动的进程监听1024以下的端口，除非为每一个二进制文件显式声明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> CAP_NET_BIND_SERVICE=+eip /usr/<span class="built_in">local</span>/bin/trojan</span><br></pre></td></tr></table></figure><h6 id="使用systemd启动trojan">使用systemd启动Trojan</h6><p>Trojan启动、查看状态命令分别如下，第一条是启动Trojan，第二条是查看Trojan运行状态。启动之后再查看一下状态，Trojan显示active (running)即表示正常启动了。如果出现<code>fatal: config.json(n): invalid code sequence</code>错误，那么是你的配置文件第<code>n</code>行有错误，请检查。如果启动失败，还可以用<code>journalctl -f -u trojan</code>查看<code>systemd</code>的日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> trojan</span><br><span class="line">sudo systemctl restart trojan</span><br><span class="line">sudo systemctl status trojan</span><br></pre></td></tr></table></figure><h5 id="更新证书">更新证书</h5><p>当acme.sh重新安装证书之后，需要通知Trojan重新加载证书。最简单的方案是每三个月登录服务器重启Trojan，但是不够完美，毕竟重启的时候会导致服务中断。其实Trojan有实现<a href="https://github.com/trojan-gfw/trojan/commit/53ca5f80fcd6239c28c8520886692e9186e3fcf6" target="_blank" rel="noopener">reload certificate and private key</a>功能，只需要在证书更新后给Trojan发送<code>SIGUSR1</code>消息即可。Trojan收到<code>SIGUSR1</code>消息后便会自动加载新的证书和密钥文件，这样就不用重启Trojan了。手动给Trojan发送<code>SIGUSR1</code>消息的命令是<code>sudo -u trojan killall -s SIGUSR1 trojan</code>，但是这样也不够完美，也得每三个月登录服务器运行一次该命令。其实我们可以给用户<code>trojan</code>添加定时任务，使其每个月运行一次该命令即可。实现如下。</p><p>首先，编辑用户<code>trojan</code>的crontab文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u trojan crontab -e</span><br></pre></td></tr></table></figure><p>在文件末尾添加一行如下，该行表示每个月1号的时候运行命令<code>killall -s SIGUSR1 trojan</code>，由于是使用用户<code>trojan</code>运行的，故不需要在前面加<code>sudo -u trojan</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 1 * * killall -s SIGUSR1 trojan</span><br></pre></td></tr></table></figure><p>最后查看crontab是否生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u trojan crontab -l</span><br></pre></td></tr></table></figure><h5 id="更新trojan">更新Trojan</h5><p>如果Trojan版本有更新（可以去<a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">这里</a>查看是否有更新），那么使用本教程搭建的服务器端更新Trojan版本只需要三条命令即可，不过要注意的是，第一条命令会提示是否覆盖配置文件，如果没有必要请回答n，否则配置文件将会被覆盖（如果不小心覆盖了就得自己重新编辑了）。第二条命令重新赋予Trojan监听443端口的能力。第三条命令重启Trojan。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)</span>"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> CAP_NET_BIND_SERVICE=+eip /usr/<span class="built_in">local</span>/bin/trojan</span><br><span class="line">sudo systemctl restart trojan</span><br></pre></td></tr></table></figure><h4 id="配置trojan和nginx开机自启">配置Trojan和Nginx开机自启</h4><p>虽然开机自启一般用不着，除非vultr机房停电，但是反正也没什么代价，弄一下吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> trojan</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h4 id="检查服务器是否配置成功">检查服务器是否配置成功</h4><p>到这里服务器就配置完成了。此时你可以在浏览器里面访问你的网站看是否能够访问，如果你的网站可以访问了，那么就一切正常啦。</p><p>另外，基于以上考虑到的可能的恶意探测，可以验证一下以下情况是否正常。</p><ol type="1"><li>浏览器中使用ip访问：重定向到<a href="https://tdom.ml" target="_blank" rel="noopener">https://tdom.ml</a>;</li><li>浏览器中使用<a href="https://ip" target="_blank" rel="noopener">https://ip</a>访问：重定向到<a href="https://tdom.ml" target="_blank" rel="noopener">https://tdom.ml</a>(跳转的时候浏览器可能提示不安全是正常的);</li><li>浏览器中使用<a href="tdom.ml">tdom.ml</a>访问：重定向到<a href="https://tdom.ml" target="_blank" rel="noopener">https://tdom.ml</a>。</li></ol><h4 id="启动bbr可选建议">启动bbr（可选，建议）</h4><p>启动bbr需要Linux内核版本在4.10及以上，如果低于该版本需要自己升级（这不在本教程范围之后）内核版本，保证内核版本不低于4.10。查看系统内核版本命令如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>bbr是谷歌开发的网络控制算法，可以加快访问速度。执行下面命令查看当前系统是否启用bbr。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>执行完成之后如果<strong><em>提示<code>net.ipv4.tcp_congestion_control = bbr</code></em></strong>即表示启动了bbr，可以跳过下面启动bbr的步骤。</p><p>直接将下面三条命令拷贝粘贴到Xshell里面执行即可启动bbr，检查启动状态同上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">'echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf'</span></span><br><span class="line">sudo bash -c <span class="string">'echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf'</span></span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure><h4 id="配置防火墙可选">配置防火墙（可选）</h4><p>只打开22、80和443端口可以有效的阻止外部恶意流量，降低服务器暴露的风险。此步骤非必须，而且自己有其他服务记得其他服务的端口也要处理。</p><p>本文以ufw为例配置防火墙，ufw是一个很好用的防火墙配置命令，可以简化操作，减少错误的发生。</p><p><strong><em>Debian or Ubuntu</em></strong>执行如下命令安装ufw</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install -y ufw</span><br></pre></td></tr></table></figure><p><strong><em>CentOS</em></strong>执行如下两个命令安装ufw</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br><span class="line">sudo yum install -y ufw</span><br></pre></td></tr></table></figure><p>如果服务器无IPv6地址那么需要执行如下命令，将IPV6=yes修改为IPV6=no。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/default/ufw</span><br></pre></td></tr></table></figure><p>执行如下命令即可成功配置防火墙。注意，如果ssh端口不是22那么第一行需要调整（将ssh改为端口号）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br><span class="line">sudo ufw allow ssh</span><br><span class="line">sudo ufw allow https</span><br><span class="line">sudo ufw allow http</span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure><p>另外，如果对Trojan不放心，那么可以参考<a href="https://github.com/trojan-gfw/trojan/wiki/Limiting-Server-Network-Access" target="_blank" rel="noopener">trojan wiki</a>，优化防火墙配置，使得Trojan只能给127.0.0.1:80发送数据和响应外部请求。</p><h4 id="与现有nginx服务集成">与现有Nginx服务集成</h4><p>如果你本机已经有Nginx服务，那么Nginx配置文件需要做适当修改以和现有服务兼容。</p><ol type="1"><li><p>在原服务与Trojan使用同一个域名且原来是监听443端口的情况下，那么需要将你的ssl配置删除并将监听地址改为第一个server监听的地址127.0.0.1:80，然后直接用修改好的server代替上述配置文件中第一个server即可。这样https加密部分将会由Trojan处理之后转发给Nginx而不是由Nginx处理，原来的服务对于客户端来说就没有变化。</p></li><li><p>如果原来的服务与Trojan使用不同的域名，建议是修改Trojan与原来的服务使用同一个域名，如果非要使用不同的域名，请参考第3点。</p></li><li><p>如果原来的服务就监听了多个域名，那么请自己琢磨Nginx的sni，参考连接：<a href="https://nginx.org/en/docs/stream/ngx_stream_ssl_preread_module.html" target="_blank" rel="noopener">ngx_stream_ssl_preread_module</a>。</p></li><li><p>如果原来的服务是监听80端口，想要继续监听80端口那么直接去除第三个server即可（将域名验证相关location与自己的虚拟主机组合，否则无法更新证书），如果要改为监听443端口参考第1点。</p></li></ol><h3 id="配置trojan客户端">配置Trojan客户端</h3><p>开源社区为Trojan贡献了很多客户端，这里挑选几个做简单介绍。客户端的配置都大同小异，无需赘述。</p><ul class="task-list"><li><input type="checkbox" disabled checked><a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">Trojan原生客户端</a>：由Trojan源代码编译而成，绝对官方正版；</li><li><input type="checkbox" disabled><a href="https://github.com/Dreamacro/clash/releases" target="_blank" rel="noopener">Clash</a>：自<code>0.19.0</code>版本开始支持Trojan；</li><li><input type="checkbox" disabled checked><del><a href="https://github.com/Trojan-Qt5/Trojan-Qt5/releases" target="_blank" rel="noopener">Trojan-Qt5</a>：集成Clash，所以支持Trojan；（已删库跑路）</del></li><li><input type="checkbox" disabled checked><a href="https://github.com/KevinZonda/trojan-client-slim/releases" target="_blank" rel="noopener">TCS</a>：由C#实现的UI，内部直接调用Trojan原生客户端，故只支持Windows系统；</li><li><input type="checkbox" disabled><a href="https://github.com/Dr-Incognito/V2Ray-Desktop/releases" target="_blank" rel="noopener">V2Ray-Desktop</a>：集成Clash，所以支持Trojan。</li></ul><h4 id="trojan原生客户端">Trojan原生客户端</h4><p>Trojan原生客户端只能监听一个SOCKS5端口，而没有其他附属功能，所以需要配合其他软件使用，比如<a href="https://www.proxifier.com/" target="_blank" rel="noopener">proxifier</a>等。推荐使用Trojan+Chrome插件<a href="https://github.com/FelisCatus/SwitchyOmega" target="_blank" rel="noopener">SwitchyOmega</a>实现只能Chrome翻墙的目的。这样Trojan监听一个SOCKS5端口，由Chrome插件SwitchyOmega决定当前流量是否走代理，并选择转发到Trojan或者直连。如果你有别的用途可以单独在某个软件内部使用SOCKS5协议指定代理或使用proxifier。</p><p><strong><em>注：本文设置Trojan监听地址为SOCKS5://127.0.0.1:9999</em></strong></p><h5 id="配置windows客户端">配置Windows客户端</h5><p>Windows客户端下载地址<a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">Trojan for Windows</a>，打开之后下载最新版本的win.zip压缩包。</p><p>下载成功之后解压，修改目录中的<code>config.json</code>配置文件中的<code>local_port</code>、<code>remote_addr</code>和<code>password</code>即可。其中，<code>remote_addr</code>填写自己的域名，<code>local_port</code>开启本地端口，用来接收本地数据，建议修改为不常用端口，否则容易冲突，本文使用端口9999演示。Trojan不需要安装就可以直接运行，拷贝Trojan文件夹到电脑里面，双击即可运行。如果启动报错，那么说明你的系统里面没有C++运行环境，需要安装<a href="https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads" target="_blank" rel="noopener">VC++运行环境</a>（1.12.3及以前版本安装x86环境，1.13.0及以后版本安装x64环境，或者两个版本都安装也行），然后重新启动Trojan，确认Trojan没有报错即可。如果启动Trojan会一闪而过，那么应该是你配置文件有错误，请仔细检查。可以使用控制台运行Trojan，能看到具体是哪一行有错，具体方法：使用命令提示符在Trojan目录运行<code>trojan</code>命令可以看到具体哪一行错误，如果出现<code>fatal: config.json(n): invalid code sequence</code>错误，那么是你的配置文件第<code>n</code>行有错误，请检查。</p><p><strong><em>如何配置图形界面：</em></strong>如果对黑框有强迫症，可以使用<a href="https://github.com/rexdf/CommandTrayHost/releases" target="_blank" rel="noopener">CommandTrayHost</a>将黑框托盘化。我编写了相关配置文件放在<a href="https://github.com/trojan-tutor/VPN/releases" target="_blank" rel="noopener">GitHub</a>，可自取。下载完成之后解压并将你的Trojan配置文件拷贝到Trojan目录即可使用。</p><h5 id="配置mac客户端">配置Mac客户端</h5><p>Mac客户端下载地址<a href="https://github.com/trojan-gfw/trojan/releases" target="_blank" rel="noopener">Trojan for Mac</a>，打开之后下载最新版的macos.zip，编辑配置文件同Windows客户端，编辑好配置文件后双击运行<code>start.command</code>即可。如果出现<code>bind: Permission denied</code>错误，需要在终端使用<code>killall trojan</code>命令杀掉现有的Trojan相关的进程。如果出现<code>fatal: config.json(n): invalid code sequence</code>错误，那么是你的配置文件第<code>n</code>行有错误，请检查。</p><h4 id="trojan-qt5"><del>Trojan-Qt5</del></h4><p><del>Trojan-Qt5是一个专为trojan开发的跨平台的GUI客户端，目前支持Windows、Linux、Mac。软件下载地址：<a href="https://github.com/TheWanderingCoel/Trojan-Qt5/releases/latest" target="_blank" rel="noopener">Trojan-Qt5</a>。此处以Windows为例，由于是跨平台软件，故除了安装方式不同以外（安装软件应该都会吧，哈哈），配置方面Linux和Mac的配置与Windows大同小异，不再赘述。</del></p><p><del>拷贝Trojan-Qt5-Windows文件夹到电脑里面，并启动Trojan-Qt5.exe。点击菜单栏的：连接》添加》手动。</del> <img src="p41/手动添加连接.jpg" alt="手动添加连接.jpg"></p><p><del>然后手动添加TROJAN连接。</del> <img src="p41/手动添加连接1.jpg" alt="手动添加连接1.jpg"></p><p><del>在弹出的窗口中按照如下的内容填写（其他选项若不懂请保持默认）：</del></p><ul><li><del>配置名称 : 服务器节点的名称，随便填写；</del></li><li><del>服务器地址： 填写服务器域名：&lt;tdom.ml&gt;；</del></li><li><del>密钥： 填入你配置trojan时设置的密码，若安装了<a href="/2019/06/08/p43.html">Trojan-Panel</a>，则填写用户名和密码，使用英文冒号分隔；</del></li><li><del>自动化： 勾选后会在程序启动时自动连接该节点，即将当前节点作为默认节点，可按需修改。</del></li></ul><p><del>修改完参数之后，点击OK完成服务器节点的添加。另外托盘区有两个地方需要求改。</del></p><p><del>首先将代理模式改为PAC模式。</del> <img src="p41/PAC模式.jpg" alt="PAC模式.jpg"></p><p><del>然后，更新PAC为GFWlist。</del> <img src="p41/GFWlist.jpg" alt="GFWlist.jpg"></p><p><del>另外还可以在设置》常规设置里面配置开机自启。</del> <img src="p41/autostartup.jpg" alt="autostartup.jpg"></p><p><del>现在可以使用工具栏快捷方式管理节点了，包括连接、断开连接、测速等。点击连接，如果节点信息没有输入错误且软件未报错的情况下，此时已经可以使用任意浏览器访问google了。</del> <img src="p41/管理节点.jpg" alt="管理节点.jpg"></p><h4 id="tcs">TCS</h4><p><a href="https://github.com/KevinZonda/trojan-client-slim/releases" target="_blank" rel="noopener">TCS</a>是由C#实现的UI，内部直接调用Trojan原生客户端，故只支持Windows系统。下载并解压对应文件，双击启动TCS.exe即可运行，配置参考Trojan原生客户端部分。</p><h3 id="配置switchyomega插件">配置SwitchyOmega插件</h3><h4 id="安装chrome">安装Chrome</h4><p>如果没有chrome的话，先下载一个chrome。在浏览器中输入以下下载地址即可下载chrome：<a href="https://www.google.cn/chrome/" target="_blank" rel="noopener">https://www.google.cn/chrome/</a>。注意，如果你的chrome不是通过官方途径安装的可能无法使用，需要按我给的方法重新安装。</p><h4 id="确认服务器可达">确认服务器可达</h4><p><strong><em>在Chrome浏览器中访问你自己的网站，确保服务器可达。</em></strong>这一步在每一台Windows的客户端都必须做，否则有可能会连接服务器失败（Trojan日志显示握手失败），这是Windows系统的问题（或者说是bug吧）。</p><h4 id="以socks5方式启动chrome">以SOCKS5方式启动Chrome</h4><p>这一步只有安装Trojan原生客户端的需要运行且只需要这一次运行，配置完成之后可正常使用，这是由于Trojan原生客户端不支持GFWlist或全局代理功能导致的。</p><h5 id="windows">Windows</h5><p>在命令提示符（搜索框输入cmd）输入下面的命令启动Chrome，注意端口号如果你有修改也要对应的修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start C:\<span class="string">"Program Files"</span>\Google\Chrome\Application\chrome.exe --proxy-server=<span class="string">"socks5://127.0.0.1:9999"</span> --host-resolver-rules=<span class="string">"MAP * ~NOTFOUND, EXCLUDE 127.0.0.1"</span></span><br></pre></td></tr></table></figure><p><strong><em>如果上述命令无法启动Chrome，是因为新版本的Chrome更改了安装路径导致的，你需要更新你的Chrome版本啦。</em></strong></p><h5 id="mac">Mac</h5><p>在终端输入下面的命令启动Chrome，注意端口号如果你有修改也要对应的修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --proxy-server=<span class="string">"socks5://127.0.0.1:9999"</span> --host-resolver-rules=<span class="string">"MAP * ~NOTFOUND, EXCLUDE 127.0.0.1"</span></span><br></pre></td></tr></table></figure><h4 id="安装switchyomega插件">安装SwitchyOmega插件</h4><p>Chrome浏览器中访问如下链接：<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN</a>即可找到SwitchyOmega插件并安装之，如下图： <img src="p41/switchyOmega.jpg" alt="switchyOmega.jpg"></p><h4 id="配置switchyomega插件以下每一步配置完之后记得应用选项">配置SwitchyOmega插件（以下每一步配置完之后记得应用选项）</h4><ol type="1"><li><p>在chrome右上角打开SwitchyOmega配置界面，如图所示： <img src="p41/InputConfig.jpg" alt="InputConfig.jpg"></p></li><li><p>定位到情景模式中的“proxy”，该情景模式与Trojan客户端对接，故配置与Trojan客户端一样。代理协议选择SOCKS5，代理服务器填写<code>127.0.0.1</code>，代理端口填写<code>9999</code>。 <img src="p41/switchy代理服务器.jpg" alt="switchy代理服务器.jpg"></p></li><li><p>情景模式中的auto switch配置如图所示：注意规则列表规则选择proxy，规则列表格式为AutoProxy，其网址为：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</span><br></pre></td></tr></table></figure><p>填写完成之后需要先更新情景模式使其生效，如图所示： <img src="p41/autoSwitch.jpg" alt="autoSwitch"></p><p>另外这个连接本身不稳定，官方有给几个镜像地址可以酌情选择，参见<a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">gfwlist</a>。</p><blockquote><p>GFWList URL(Github): https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</p><p><strong>Notwithstanding Github is competent for distribution, to hedge outages or connection issues we still recommend using any URL below.</strong></p><p><strong>Official mirror URLs:</strong></p><ol type="1"><li><p>Pagure: https://pagure.io/gfwlist/raw/master/f/gfwlist.txt</p></li><li><p>Repo.or.cz: http://repo.or.cz/gfwlist.git/blob_plain/HEAD:/gfwlist.txt</p></li><li><p>Bitbucket: https://bitbucket.org/gfwlist/gfwlist/raw/HEAD/gfwlist.txt</p></li><li><p>Gitlab: https://gitlab.com/gfwlist/gfwlist/raw/master/gfwlist.txt</p></li><li><p>TuxFamily: https://git.tuxfamily.org/gfwlist/gfwlist.git/plain/gfwlist.txt</p></li></ol><p><strong>Mirrors can alleviate the problem caused by raw file fetch at GitHub which might be a breach of <a href="https://github.com/site/terms" target="_blank" rel="noopener">GitHub ToS</a>.</strong></p></blockquote><ol start="4" type="1"><li><p>设定中的初始情景模式选择auto switch，如图所示。这样当检测到目标地址在列表中的时候Chrome会强制其走trojan代理，否则直连。 <img src="p41/初始情景模式.jpg" alt="初始情景模式"></p></li><li><p>重启Chrome，保证SwitchyOmega运行在auto switch模式，否则可能无法正常使用，常见现象有无法访问国外网站、导致访问国内网站速度变慢或无法访问内网等。如图所示： <img src="p41/确定状态.jpg" alt="确定状态"></p></li></ol><h4 id="添加连接到switchyomega列表">添加连接到SwitchyOmega列表</h4><p>如果遇到无法访问的连接，手动将此连接添加到auto switch列表里面即可，如图所示。 <img src="p41/添加条件.jpg" alt="添加条件"> <img src="p41/添加条件1.jpg" alt="添加条件1"></p><p>也可将该域名临时加入proxy规则，如图所示。 <img src="p41/添加条件2.jpg" alt="添加条件2"></p><h3 id="其他客户端部署指南">其他客户端部署指南</h3><p>Linux系统CLI客户端：Linux系统CLI客户端安装方式与服务端一样，配置文件参考客户端修改即可；</p><p>IOS客户端：美区ID+[<a href="https://apps.apple.com/app/pharos-pro/id1456610173" target="_blank" rel="noopener">Pharos Pro</a> | <a href="https://apps.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="noopener">Shadowrocket</a>];</p><p>Android客户端：<a href="https://github.com/trojan-gfw/igniter/releases" target="_blank" rel="noopener">igniter</a>。</p><h3 id="fqa">FQA</h3><p><strong><em>客户端和服务器报错<code>SSL handshake failed</code>：</em></strong>1. 检查客户端密码是否与服务器密码一致，2. 检查是否开启了Clouldflare的CDN（可ping域名看IP是否与服务器IP一致）。</p><h3 id="如何寻求帮助">如何寻求帮助</h3><ol type="1"><li>仔细核对操作是否与本文一致，特别是我加粗的地方很容易出错。或者查找<a href="https://github.com/trojan-tutor/trojan-tutor.github.io/issues?utf8=%E2%9C%93&amp;q=is%3Aissue" target="_blank" rel="noopener">留言区</a>是否有类似问题可以参考。</li><li>去<a href="https://github.com/trojan-gfw/trojan/issues?utf8=%E2%9C%93&amp;q=is%3Aissue" target="_blank" rel="noopener">Trojan-GFW</a>项目查找是否有类似issue，如果有类似issue可自行参考解决。如果没有类似issue也可以在那里提交新的issue，基本上都会得到回复。</li><li>去<a href="https://github.com/trojan-gfw" target="_blank" rel="noopener">Trojan-GFW</a>官方电报群请教群里的开发者和大佬们：<a href="https://t.me/trojangfw" target="_blank" rel="noopener">trojan-gfw</a>。群里的人都是比较专业的，你的问题基本都能被解决，请注意群规和礼貌。</li><li>在博客<a href="https://github.com/trojan-tutor/trojan-tutor.github.io/issues?utf8=%E2%9C%93&amp;q=is%3Aissue" target="_blank" rel="noopener">留言区</a>留言，我有空便会回复（但是肯定没有 1, 2 和 3 方便和及时），记得带上服务端和客户端日志还有浏览器提示一起！</li></ol><h3 id="进阶">进阶</h3><p>Trojan-GFW项目提供了用户管理界面，可以很方便的添加、删除用户和为每个用户设置流量限制，配置教程：<a href="/2019/06/08/p43.html">Trojan-Panel配置</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 代理工具 </tag>
            
            <tag> GFW </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> vps </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Debian </tag>
            
            <tag> vultr </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Trojan </tag>
            
            <tag> Trojan-GFW </tag>
            
            <tag> Trojan-quickstart </tag>
            
            <tag> https伪装 </tag>
            
            <tag> Nginx </tag>
            
            <tag> bash </tag>
            
            <tag> 小白教程 </tag>
            
            <tag> 搭建教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
